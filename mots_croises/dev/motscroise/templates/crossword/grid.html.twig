<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Crossword</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400..700&display=swap');

        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background: url('./images/background.png') no-repeat center center fixed;
            background-size: cover;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            min-height: 100vh;
            margin: 0;
            overflow-y: auto;
            padding: 20px;
        }
        .container {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            background: rgba(255, 255, 255, 0.8);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 50px;
            margin-top: 50px;
        }
        video {
            width: 80%;
            max-width: 300px;
            height: auto;
        }

        .definition-label {
            text-align: left;
            width: 100%;
            margin-top: 20px;
            margin-bottom: 0;
            max-width: 400px;
            font-size: 16px;
        }

        .definition-container {
            text-align: left;
            width: 90%;
            max-width: 400px;
            margin-top: 0;
            font-size: 14px;
            line-height: 1.6;
            word-wrap: break-word;
            padding: 0;
        }
        .definition-container p {
            white-space: pre-line;
        }

        .grille-container {
            display: inline-block;
            background: rgba(255, 255, 255, 0.9);
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        table {
            border-collapse: collapse;
            border-spacing: 5px;
            background: #f8f9fa;
            padding: 10px;
            border-radius: 8px;
        }

        td {
            width: 45px;
            height: 45px;
            border: 1px solid #007bff;
            text-align: center;
            vertical-align: middle;
            font-size: 18px;
            font-weight: bold;
            color: #333;
            position: relative;
            border-radius: 5px;
            transition: all 0.2s ease-in-out;
            background: white;
            box-shadow: 0 2px 5px rgba(0, 123, 255, 0.2);
        }

        td:hover {
            background: #e3f2fd;
            transform: scale(1.05);
            cursor: pointer;
        }

        .case-vide {
            background: none !important;
            border: none !important;
            box-shadow: none !important;
        }

        .blur {
            filter: blur(5px);
        }

        .numero-externe {
            position: absolute;
            top: 3px;
            left: 3px;
            font-size: 9px;
            font-weight: bold;
            color: #007bff;
        }

        .definition-display {
            margin: 20px 0;
            width: 100%;
            max-width: 600px;
            padding: 15px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            font-size: 16px;
            color: #333;
            text-align: left;
            order: -1; /* Place la définition avant la grille */
        }

        .hidden {
            display: none;
        }

        .correct .case-contenu {
            color: #28a745;
            font-weight: bold;
        }

        .case-contenu {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        @media screen and (max-width: 768px) {
            .container {
                max-width: 100%;
                padding: 10px;
            }

            .grille-container {
                padding: 10px;
                overflow-x: auto;
            }

            td {
                width: 30px;
                height: 30px;
                font-size: 16px;
            }

            .bubble {
                font-size: 16px;
                max-width: 150px;
                top: -30px;
            }

            .start-button {
                font-size: 16px;
                padding: 10px 20px;
                max-width: 200px;
            }
        }

        @media screen and (max-width: 480px) {
            body {
                padding: 10px;
                overflow-x: hidden;
            }

            .container {
                width: 100%;
                padding: 5px;
            }

            .grille-container {
                padding: 10px;
                overflow-x: auto;
                max-width: 100%;
            }

            td {
                width: 40px;
                height: 25px;
                font-size: 16px;
            }

            .bubble {
                font-size: 14px;
                max-width: 100px;
                padding: 8px;
                top: -25px;
                right: 5px;
            }

            .start-button {
                font-size: 14px;
                padding: 10px 15px;
                max-width: 160px;
            }
        }

        .timer {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 20px;
            color: #007bff;
        }

        .grille-wrapper {
            position: relative;
        }

        .blur-background {
            pointer-events: none; /* Empêche les interactions avec l'arrière-plan */
        }

        .case-partagee {
            border: 2px dashed #007bff; /* Bordure en pointillés pour indiquer une case partagée */
            background-color: #e3f2fd;/* Bordure en pointillés pour indiquer une case partagée */
        }

        /* Style pour les cases sélectionnées */
        .case-selectionnee {
            background-color: #b3e5fc !important;
            border: 2px solid #0056b3 !important;
            transform: scale(1.1);
            z-index: 1;
            position: relative;
        }

        /* Style pour les cases du mot sélectionné */
        .mot-selectionne {
            background-color: #e3f2fd !important;
            border: 3px solid #007bff !important;
            font-weight: bold;
            z-index: 1;
            position: relative;
        }

        /* Style pour le score */
        .score {
            margin-left: 100px;
            font-size: 15px;
            font-weight: bold;
            color: #28a745; /* Couleur verte pour indiquer le succès */
        }

        /* Animation pour le score */
        @keyframes pop {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        .score-update {
            animation: pop 0.3s ease-in-out;
        }
        .keyboard-icon , .help-icon{
            position: fixed;
            bottom: 20px;
            left: 20px;
            font-size: 24px;
            color: #007bff;
            cursor: pointer;
            background: rgba(2, 3, 3, 0.9);
            padding: 10px;
            border-radius: 50%;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            z-index: 1000;
        }
        .grille-container {
            margin-bottom: 20px; /* Marge par défaut */
        }
        .keyboard-icon:hover {
            background: #e3f2fd;
        }

        /* Style pour le clavier tactile */
        .virtual-keyboard {
            position: fixed; /* Changer de fixed à absolute */
            bottom: 0; /* Position en bas de l'écran */
            left: 50%; /* Centrer horizontalement */
            transform: translateX(-50%); /* Centrer horizontalement */
            background: rgba(255, 255, 255, 0.9);
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            display: none; /* Masqué par défaut */
            z-index: 1000;
            width: 90%; /* Largeur du clavier */
            max-width: 400px; /* Largeur maximale */
        }

        .virtual-keyboard.visible {
            display: block; /* Affiché lorsque visible */
        }
        .virtual-keyboard.visible + .grille-container {
            margin-bottom: 200px; /* Augmenter la marge lorsque le clavier est visible */
        }
        .keyboard-row {
            display: flex;
            justify-content: center;
            gap: 5px;
            margin-bottom: 5px;
        }

        .keyboard-key {
            background: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.2s ease-in-out;
        }

        .keyboard-key:hover {
            background: #0056b3;
        }
        .close-button {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            font-size: 20px;
            color: #007bff;
            transition: color 0.2s ease-in-out;
        }

        .close-button:hover {
            color: #0056b3;
        }


        .keyboard-icon:hover, .help-icon:hover, .joker-icon:hover {
            background: #e3f2fd;
        }

        .help-icon {
            left: 70px; /* Position à côté de l'icône du clavier */
        }



        .keyboard-icon:hover, .help-icon:hover {
            background: #e3f2fd;
        }

        .help-icon {
            left: 70px; /* Position à côté de l'icône du clavier */
        }

        /* Style pour le conteneur de la définition */
        .help-definition {
            width: 90%;
            max-width: 600px;
            margin: 20px auto;
            padding: 15px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            font-size: 16px;
            color: #333;
            text-align: left;
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        .help-definition.hidden {
            display: none;
        }
    </style>
</head>
<body>
<div class="main-wrapper">
<div class="container">
    <div class="timer">
        Temps restant : <span id="time">05:30</span>
        <span class="score">Score : <span id="score">0</span></span>
    </div>
    <div id="definition-display" class="definition-display hidden">
        <p id="definition-text"></p>
    </div>
    <div class="grille-wrapper">
        <div class="grille-container">
            <table>

                {% for x in 1..10 %}
                    <tr>
                        {% for y in 1..14 %}

                            {% if grille[x][y].contenu %}

                                <td class="case {% if grille[x][y].casePartage %}case-partagee{% endif %}"
                                    data-x="{{ x }}"
                                    data-y="{{ y }}"
                                    data-mot-id="{% for mot in grille[x][y].mots %}{{ mot.id }} {% endfor %}"
                                    onclick="openDefinition({{ grille[x][y].mots[0].id }}, '{{ grille[x][y].mots[0].definition }}', event)">
                                    {% if grille[x][y].numero %}
                                        <div class="numero-externe">{{ grille[x][y].numero }}</div>
                                    {% endif %}
                                    <div class="case-contenu" data-lettres="{{ grille[x][y].mots[0].mot }}"></div>
                                </td>
                            {% else %}
                                <td class="case-vide"></td>
                            {% endif %}
                        {% endfor %}
                    </tr>
                {% endfor %}
            </table>
        </div>
    </div>
    <!-- Conteneur pour la définition -->
    <div id="help-definition" class="help-definition hidden">
        <p>
            Une _________ destinée à être mise en contact avec les diverses parties du _____ ______ (ongles, ________, lèvres, etc.) ou avec les _____, pour les ________, les ________, modifier leur aspects, les ________ et les maintenir en bon état.
        </p>
    </div>
</div>

</div>

<div class="help-icon" onclick="toggleHelp()">
    🃏
</div>

<div class="keyboard-icon" onclick="toggleVirtualKeyboard()">
    ⌨️
</div>

<!-- Clavier tactile -->
<div class="virtual-keyboard" id="virtual-keyboard">
    <div class="close-button" onclick="toggleVirtualKeyboard()">×</div>
    <div class="keyboard-row">
        <button class="keyboard-key" onclick="insertLetter('A')">A</button>
        <button class="keyboard-key" onclick="insertLetter('B')">B</button>
        <button class="keyboard-key" onclick="insertLetter('C')">C</button>
        <button class="keyboard-key" onclick="insertLetter('D')">D</button>
        <button class="keyboard-key" onclick="insertLetter('E')">E</button>
        <button class="keyboard-key" onclick="insertLetter('F')">F</button>
        <button class="keyboard-key" onclick="insertLetter('G')">G</button>
    </div>
    <div class="keyboard-row">
        <button class="keyboard-key" onclick="insertLetter('H')">H</button>
        <button class="keyboard-key" onclick="insertLetter('I')">I</button>
        <button class="keyboard-key" onclick="insertLetter('J')">J</button>
        <button class="keyboard-key" onclick="insertLetter('K')">K</button>
        <button class="keyboard-key" onclick="insertLetter('L')">L</button>
        <button class="keyboard-key" onclick="insertLetter('M')">M</button>
    </div>
    <div class="keyboard-row">
        <button class="keyboard-key" onclick="insertLetter('N')">N</button>
        <button class="keyboard-key" onclick="insertLetter('O')">O</button>
        <button class="keyboard-key" onclick="insertLetter('P')">P</button>
        <button class="keyboard-key" onclick="insertLetter('Q')">Q</button>
        <button class="keyboard-key" onclick="insertLetter('R')">R</button>
    </div>
    <div class="keyboard-row">
        <button class="keyboard-key" onclick="insertLetter('S')">S</button>
        <button class="keyboard-key" onclick="insertLetter('T')">T</button>
        <button class="keyboard-key" onclick="insertLetter('U')">U</button>
        <button class="keyboard-key" onclick="insertLetter('V')">V</button>
    </div>
    <div class="keyboard-row">
        <button class="keyboard-key" onclick="insertLetter('W')">W</button>
        <button class="keyboard-key" onclick="insertLetter('X')">X</button>
        <button class="keyboard-key" onclick="insertLetter('Y')">Y</button>
        <button class="keyboard-key" onclick="insertLetter('Z')">Z</button>
    </div>
</div>

<script>
    let selectedCell = null;
    let currentMotId = null;
    let currentCells = []; // Stocke toutes les cases du mot sélectionné
    let currentIndex = 0; // Index de la case actuellement sélectionnée dans le mot
    let timer;
    let timeLeft = 330; // 5 minutes en secondes
    let score = 0; // Variable pour suivre le score
    // Fonction pour basculer l'affichage de l'aide
    function toggleHelp() {
        const helpDefinition = document.getElementById('help-definition');
        helpDefinition.classList.toggle('hidden');
    }




    // Fonction pour mettre à jour les cases partagées
    function updateSharedCells(cell, letter) {
        const x = cell.getAttribute('data-x');
        const y = cell.getAttribute('data-y');
        const sharedCells = document.querySelectorAll(`[data-x="${x}"][data-y="${y}"]`);
        sharedCells.forEach(sharedCell => {
            const contenuDiv = sharedCell.querySelector('.case-contenu');
            if (contenuDiv) {
                contenuDiv.textContent = letter;
            }
        });
    }
    function toggleVirtualKeyboard() {
        const keyboard = document.getElementById('virtual-keyboard');
        const grilleContainer = document.querySelector('.grille-container');

        keyboard.classList.toggle('visible');

        // Ajuster la marge en bas de la grille lorsque le clavier est visible
        if (keyboard.classList.contains('visible')) {
            grilleContainer.style.marginBottom = '200px'; // Ajustez cette valeur selon vos besoins
        } else {
            grilleContainer.style.marginBottom = '20px'; // Rétablir la marge par défaut
        }
    }

    // Fonction pour insérer une lettre dans la case sélectionnée
    function insertLetter(letter) {
        if (selectedCell) {
            // Écrire la lettre dans la case sélectionnée
            selectedCell.querySelector('.case-contenu').textContent = letter;

            // Mettre à jour toutes les cases partagées à cette position
            updateSharedCells(selectedCell, letter);

            // Passer à la case suivante
            currentIndex++;


            if (currentIndex < currentCells.length) {
                selectedCell = currentCells[currentIndex];
                selectedCell.classList.add('case-selectionnee');
            } else {
                // Toutes les cases sont remplies, vérifier le mot
                checkWordCompletion();
            }
        }
    }


    function startTimer() {
        const timeElement = document.getElementById('time');

        timer = setInterval(() => {
            timeLeft--;
            if (timeLeft <= 0) {
                clearInterval(timer);
                gameOver();
            }

            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timeElement.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        }, 1000);
    }

    function gameOver() {
        const gameOverModal = document.createElement('div');
        gameOverModal.style.position = 'fixed';
        gameOverModal.style.top = '50%';
        gameOverModal.style.left = '50%';
        gameOverModal.style.transform = 'translate(-50%, -50%)';
        gameOverModal.style.backgroundColor = 'white';
        gameOverModal.style.padding = '20px';
        gameOverModal.style.border = '1px solid #000';
        gameOverModal.style.zIndex = '1000';
        gameOverModal.style.textAlign = 'center';

        gameOverModal.innerHTML = `
            <h2>Game Over</h2>
            <p>Le temps est écoulé !</p>
            <button onclick="restartGame()">Recommencer</button>
        `;

        document.body.appendChild(gameOverModal);
    }

    function restartGame() {
        score = 0;
        document.getElementById('score').textContent = score;
        window.location.reload();
    }

    function openDefinition(motId, definition, event) {
        event.stopPropagation();

        console.log("Mot sélectionné :", motId);

        // Réinitialiser la sélection actuelle
        resetSelection();

        // Mettre à jour les variables pour la nouvelle sélection
        currentMotId = motId;

        // Afficher la définition
        const definitionDisplay = document.getElementById('definition-display');
        const definitionText = document.getElementById('definition-text');
        if (definitionDisplay && definitionText) {
            definitionText.textContent = definition;
            definitionDisplay.classList.remove('hidden');
        }

        // Récupérer toutes les cases du mot
        currentCells = [];
        const selectedCells = document.querySelectorAll(`td[data-mot-id*="${motId}"]`);

        console.log("Cases sélectionnées :", selectedCells);
        console.log("Cases trouvées :", selectedCells.length);

        selectedCells.forEach(cell => {
            const motsPartages = cell.getAttribute('data-mot-id').split(' '); // Séparer les IDs des mots
            if (motsPartages.includes(motId.toString())) {
                console.log("Case ajoutée - X:", cell.getAttribute('data-x'), "Y:", cell.getAttribute('data-y'));
                currentCells.push(cell);
            }
        });

        // Vérifier si des cases ont été trouvées
        if (currentCells.length === 0) {
            console.error("Aucune case trouvée pour ce mot.");
            return;
        }

        // Appliquer la classe CSS pour mettre en avant les cases
        currentCells.forEach(cell => {
            console.log("Ajout de la classe 'mot-selectionne' à :", cell);
            cell.classList.add('mot-selectionne');
        });

        // Sélectionner la première case du mot
        currentIndex = 0;

        if (currentCells[currentIndex]) {
            selectedCell = currentCells[currentIndex];
            console.log("Ordre des cases sélectionnées :", currentCells);
            console.log("Toutes les cases du DOM avec Y=8 :", document.querySelectorAll('[data-y="8"]'));
            console.log("Case (3,8) :", document.querySelector('[data-x="3"][data-y="8"]'));

            selectedCell.classList.add('case-selectionnee');
            selectedCell.focus(); // Activer pour taper directement
            console.log("Première case activée :", selectedCell);
        }
    }


    document.addEventListener('keydown', (e) => {
        if (selectedCell) {
            if (e.key.match(/^[a-zA-Z]$/)) {
            const letter = e.key.toUpperCase();
            selectedCell.querySelector('.case-contenu').textContent = letter;

            // Mettre à jour les cases partagées
            updateSharedCells(selectedCell, letter);

            // Passer à la case suivante
            currentIndex++;
            if (currentIndex < currentCells.length) {
                // Retirer le style de la case actuelle

                // Sélectionner la case suivante
                selectedCell = currentCells[currentIndex];
                selectedCell.classList.add('case-selectionnee');
            } else {
                // Toutes les cases sont remplies, vérifier le mot
                checkWordCompletion();
            }
        }else if (e.key === 'Backspace' || e.key === 'Delete') {
                // Si la touche Backspace ou Delete est pressée, effacer la lettre
                selectedCell.querySelector('.case-contenu').textContent = '';

                // Mettre à jour les cases partagées
                updateSharedCells(selectedCell, '');

                // Revenir à la case précédente
                if (currentIndex > 0) {
                    currentIndex--;
                    selectedCell = currentCells[currentIndex];
                    selectedCell.classList.add('case-selectionnee');
                }
            }
        }
    });



    function checkWordCompletion() {
        const userWord = currentCells.map(cell => cell.querySelector('.case-contenu').textContent.trim()).join('').toUpperCase();
        const correctWord = currentCells
            .find(cell => cell.getAttribute('data-mot-id').includes(currentMotId.toString())) // Trouver la case associée au mot sélectionné
            .querySelector('.case-contenu')
            .dataset.lettres.trim() // Supprimer les espaces
            .toUpperCase();
        console.log("Mot saisi :", userWord);
        console.log("Mot correct :", correctWord);

        if (userWord === correctWord) {
            alert('Félicitations ! Mot correct !');
            currentCells.forEach(cell => cell.classList.add('correct'));

            // Incrémenter le score
            score++;
            const scoreElement = document.getElementById('score');
            scoreElement.textContent = score;
            scoreElement.classList.add('score-update');

            // Retirer l'animation après qu'elle soit terminée
            setTimeout(() => {
                scoreElement.classList.remove('score-update');
            }, 330);
        } else {
            alert('Incorrect, réessayez !');
            currentCells.forEach(cell => {
                cell.querySelector('.case-contenu').textContent = '';
            });
        }
        resetSelection();
    }

    function resetSelection() {
        // Retirer le flou de l'arrière-plan
        const grilleWrapper = document.querySelector('.grille-wrapper');
        grilleWrapper.classList.remove('blur-background');

        // Retirer le style des cases du mot sélectionné
        if (currentCells.length > 0) {
            currentCells.forEach(cell => {
                cell.classList.remove('mot-selectionne');
                cell.classList.remove('case-partagee');
                cell.classList.remove('case-selectionnee');
            });
        }

        // Retirer le style de la case sélectionnée


        // Masquer la définition
        document.getElementById('definition-display').classList.add('hidden');

        // Réinitialiser les variables
        selectedCell = null;
        currentMotId = null;
        currentCells = [];
        currentIndex = 0;
    }

    document.addEventListener('click', (event) => {
        if (!event.target.closest('.case')) {
            resetSelection();
        }
    });

    window.onload = startTimer;
</script>

</body>
</html>